-- noinspection SqlNoDataSourceInspectionForFile


CREATE TABLE TRANS_HISTORY_TEST (
	SENDER TEXT(50)
	, RECEIVER TEXT(50)
	, DATE NUMERIC
	, AMOUNT INTEGER
	, SEQ INTEGER DEFAULT 1 NOT NULL
);

CREATE TABLE TRANS_HISTORY (
	SEQ INTEGER PRIMARY KEY,
    SENDER NVARCHAR(50) NOT NULL,
    RECEIVER NVARCHAR(50) NOT NULL,
    SEND_DATE DATETIME,
    AMOUNT INTEGER
);

CREATE TABLE TRANS_HISTORY_1 (
	SEQ INTEGER PRIMARY KEY AUTOINCREMENT,
    SENDER NVARCHAR(50) NOT NULL,
    RECEIVER NVARCHAR(50) NOT NULL,
    SEND_DATE DATETIME,
    AMOUNT INTEGER
);

CREATE TABLE TRANS_HISTORY_2 (
	SEQ INTEGER PRIMARY KEY NOT NULL UNIQUE,
    SENDER NVARCHAR(50) NOT NULL,
    RECEIVER NVARCHAR(50) NOT NULL,
    SEND_DATE DATETIME,
    AMOUNT INTEGER
);

null;

CREATE TABLE TRANS_HISTORY_3 (
	SEQ INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE DEFAULT 1,
    SENDER NVARCHAR(50) NOT NULL,
    RECEIVER NVARCHAR(50) NOT NULL,
    SEND_DATE DATETIME,
    AMOUNT INTEGER
);

null;


----------------------------------------------------------------------------------------------------



SELECT 
		ROWID
		, OID
		, _ROWID_
		, *
FROM TRANS_HISTORY
;



/* MySQL, sqlite 공용 랭킹 쿼리*/
-- 오라클은 ROW_NUMBER() OVER() 또는 RANK() OVER() 사용
-- MySQL은 변수 사용(ex. @rownum := @rownum + 1) 또는 COUNT() 사용
-- SQLite는 변수 사용(:=) 안 됨. COUNT() 사용
SELECT *
FROM (
	SELECT
		   T1.RECEIVER
		   , T1.AMOUNT
		   , (SELECT COUNT(*) + 1
		        FROM TRANS_HISTORY
		       WHERE RECEIVER = T1.RECEIVER
		         AND AMOUNT > T1.AMOUNT) AS RANKING
		   
	  FROM TRANS_HISTORY T1
) A
ORDER BY A.RECEIVER, A.RANKING 
--LIMIT 3 OFFSET 3 
;


/* MySQL, sqlite 공용 랭킹 + 상위 n개 조회 */
SELECT *
FROM (
	SELECT
		   T1.RECEIVER
		   , T1.AMOUNT
		   , (SELECT COUNT(*) + 1
		        FROM TRANS_HISTORY
		       WHERE RECEIVER = T1.RECEIVER
		         AND AMOUNT > T1.AMOUNT) AS RANKING
		   
	  FROM TRANS_HISTORY T1
	 WHERE
	 	   (SELECT COUNT(*)
		      FROM TRANS_HISTORY
		     WHERE RECEIVER = T1.RECEIVER
		       AND AMOUNT >= T1.AMOUNT) <= 3	   
) A
ORDER BY A.RECEIVER, A.RANKING
;


/* 코딜리티 1차 3번 문제 solution */
SELECT B.RECEIVER
  FROM (
	SELECT 
		   A.RECEIVER
		   , SUM(A.AMOUNT) AS AMOUNT_SUM
	  FROM (
		SELECT
			   T1.RECEIVER
			   , T1.AMOUNT
			   , (SELECT COUNT(*) + 1
			        FROM TRANS_HISTORY
			       WHERE RECEIVER = T1.RECEIVER
			         AND AMOUNT > T1.AMOUNT) AS RANKING
			   
		  FROM TRANS_HISTORY T1
		 WHERE
		 	   (SELECT COUNT(*)
			      FROM TRANS_HISTORY
			     WHERE RECEIVER = T1.RECEIVER
			       AND AMOUNT >= T1.AMOUNT) <= 3
	) A
	GROUP BY A.RECEIVER
) B
WHERE
	B.AMOUNT_SUM >= 1024
;






















